function downloadCv(e){window.location.href="http://localhost:8080/api/cvfile/download/".concat(e)}function deleteCv(e){fetch("http://localhost:8080/api/cvfile/delete/".concat(e),{method:"DELETE"}).then(function(e){if(!e.ok)return e.text().then(function(e){throw new Error(e)});alert("CV zostało usunięte."),location.reload()}).catch(function(e){console.error("Błąd podczas usuwania CV:",e),alert("Wystąpił błąd podczas usuwania CV: "+e.message)})}document.addEventListener("DOMContentLoaded",function(){var e=sessionStorage.getItem("userName"),o=sessionStorage.getItem("userId"),t=(e?(document.getElementById("userStrong").textContent=e,document.getElementById("userGreeting").textContent=e):console.error("Nazwisko użytkownika nie znalezione w sessionStorage."),document.querySelector(".cv__boxes"));function n(e){fetch("http://localhost:8080/api/cvfile/list/".concat(e)).then(function(e){if(e.ok)return e.json();throw new Error("Network response was not ok")}).then(function(e){e.forEach(function(e){var o,n;o=e,(e=document.createElement("div")).className="cv__box",(n=document.createElement("img")).src="./dist/img/cv-box.png",n.alt="Zdjęcie stworzonego CV",n.className="cv__box-photo",e.appendChild(n),(n=document.createElement("button")).className="delete-btn",n.innerHTML='<i class="fa-solid fa-trash"></i>',n.onclick=function(){return deleteCv(o.id)},e.appendChild(n),(n=document.createElement("button")).className="download-btn",n.innerHTML='Download | <i class="fa-solid fa-file-pdf"></i>',n.onclick=function(){return downloadCv(o.id)},e.appendChild(n),t.appendChild(e)})}).catch(function(e){console.error("Błąd podczas ładowania CV:",e)})}t?o?n(o):console.error("UserId nie znaleziono w sessionStorage."):console.error("Element kontenera CV nie został znaleziony.")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJwYW5lbC5qcyJdLCJuYW1lcyI6WyJkb3dubG9hZEN2IiwiY3ZGaWxlSWQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJjb25jYXQiLCJtZXRob2QiLCJmZXRjaCIsInJlc3BvbnNlIiwicmVsb2FkIiwib2siLCJ0ZXh0IiwidGhlbiIsImVycm9yVGV4dCIsImVycm9yIiwiRXJyb3IiLCJjb25zb2xlIiwiYWxlcnQiLCJtZXNzYWdlIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0SXRlbSIsInVzZXJJZCIsInNlc3Npb25TdG9yYWdlIiwiY3ZCb3hlc0NvbnRhaW5lciIsInVzZXJOYW1lIiwiZ2V0RWxlbWVudEJ5SWQiLCJ0ZXh0Q29udGVudCIsInF1ZXJ5U2VsZWN0b3IiLCJsb2FkVXNlckN2RmlsZXMiLCJqc29uIiwiZm9yRWFjaCIsImNyZWF0ZUN2Qm94IiwiY3ZGaWxlIiwiY2xhc3NOYW1lIiwiY3ZCb3giLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwiYWx0IiwiaW1nIiwiZGVsZXRlQnRuIiwiaW5uZXJIVE1MIiwib25jbGljayIsImRlbGV0ZUN2IiwiaWQiLCJkb3dubG9hZEJ0biJdLCJtYXBwaW5ncyI6IkFBOEVBLFNBQUFBLFdBQUFDLEdBRElDLE9BQU9DLFNBQVNDLEtBQUksNkNBQUFDLE9BQWdESixDQUFRLENBR2hGLENBQ0EsU0FFUUssU0FBUUwsR0FDVk0sTUFDTywyQ0FBQUYsT0FBZUosQ0FBQSxFQUFBLENBQ1pPLE9BQVEsUUFGcEIsQ0FBQyxFQUlXTCxLQUFRLFNBQUNNLEdBQ04sR0FBQUQsQ0FBQUEsRUFBQUUsR0FJUCxPQUFBRixFQUFBRyxLQUFBLEVBQUFDLEtBQUEsU0FBQUMsR0FFRyxNQUFDQyxJQUFLQyxNQUFLRixDQUFBLENBQ05DLENBQUssRUFORk4sTUFBU0csc0JBQWFFLEVBQ25CVixTQUFVVSxPQUFBQSxDQU8xQixDQUFBLEVBQUEsTUFDVixTQUFBQyxHQUhZRSxRQUFRRixNQUFNLDRCQUE2QkEsQ0FBSyxFQUNoREcsTUFBTSxzQ0FBd0NILEVBQU1JLE9BQU8sQ0FDL0QsQ0FBQyxDQUNULENBbkdBQyxTQUFTQyxpQkFBaUIsbUJBQW9CLFdBQTlDRCxJQUFTQyxFQUFBQSxlQUFpQkMsUUFBa0IsVUFBRSxFQUMxQ0MsRUFBQUMsZUFBQUYsUUFBQSxRQUFBLEVBY01HLEdBVEZDLEdBQUFBLFNBQVVDLGVBQUEsWUFBQSxFQUFBQyxZQUFBRixFQUNWTixTQUFBTyxlQUFBLGNBQUEsRUFBQUMsWUFBQUYsR0FFQU4sUUFBU08sTUFBQUEsdURBQXFELEVBTXpDUCxTQUFTUyxjQUFjLFlBQVksR0FpQzVELFNBQUFDLEVBQUFQLEdBQ0FmLE1BQVNzQix5Q0FBQUEsT0FBd0JQLENBQUEsQ0FBQSxFQUN4QlYsS0FBQSxTQUFBSixHQUVRQSxHQUFTRSxFQUFJQSxHQUdYRixPQUFTc0IsRUFBTUEsS0FBQSxFQUZSZixNQUFNLElBQUFBLE1BQUEsNkJBQThCLENBSWhELENBQUEsRUFDS0gsS0FBQ21CLFNBQUFBLEdBQ0pDLEVBQVlDLFFBQU8sU0FBQUEsR0FyQ25DLElBQXFCQSxFQUVYQyxFQUZXRCxFQXNDUEEsR0F2Q2RFLEVBQUFoQixTQUFBaUIsY0FBQSxLQUFBLEdBQ1NKLFVBQVlDLFdBRVhDLEVBQVNmLFNBQUdpQixjQUFTLEtBQUEsR0FFbEJDLElBQUdsQix3QkFDUmtCLEVBQUdDLElBQUcseUJBQ05BLEVBQUdKLFVBQUcsZ0JBQ05BLEVBQUFBLFlBQVlLLENBQUEsR0FJaEJDLEVBRGtCckIsU0FBU2lCLGNBQWMsUUFBUyxHQUN4Q0YsVUFBWSxhQUN0Qk0sRUFBVUMsVUFBWSxvQ0FDdEJELEVBQVVFLFFBQVUsV0FBQSxPQUFBQyxTQUFBVixFQUFBVyxFQUFBLENBQUEsRUFBQVQsRUFBTVEsWUFBU1YsQ0FBVSxHQUd2Q1ksRUFGWUwsU0FBVUosY0FBQSxRQUFBLEdBRVhGLFVBQVlFLGVBQzdCUyxFQUFZWCxVQUNaVyxrREFFQUEsRUFBWUgsUUFBVSxXQUFBLE9BQUExQyxXQUFBaUMsRUFBQVcsRUFBQSxDQUFBLEVBQUFULEVBQU1uQyxZQUFXaUMsQ0FBVSxFQUNqREUsRUFBa0JVLFlBQVlWLENBQUEsQ0FtQm5CLENBQUEsQ0FDSG5CLENBQU8sRUFBQ0YsTUFDVixTQUFBQSxHQUNWRSxRQUFBRixNQUFBLDZCQUFBQSxDQUFBLENBRFEsQ0FBQyxDQUdULENBckRBVSxFQXdEQ0YsRUFDR04sRUFBY00sQ0FBQSxFQUVwQk4sUUFBQUYsTUFBQSx5Q0FBQSxFQTFEUVUsUUFBQUEsTUFBZ0IsNkNBQXVDLENBNERqRSxDQUFBIiwiZmlsZSI6InVzZXJwYW5lbC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xyXG4gICAgLy8gUG9iaWVyYW5pZSBuYXp3eSB1xbx5dGtvd25pa2EgaSB1c2VySWQgeiBzZXNzaW9uU3RvcmFnZVxyXG4gICAgY29uc3QgdXNlck5hbWUgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCd1c2VyTmFtZScpO1xyXG4gICAgY29uc3QgdXNlcklkID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgndXNlcklkJyk7XHJcblxyXG4gICAgLy8gU3ByYXdkemFuaWUsIGN6eSBuYXp3YSB1xbx5dGtvd25pa2EgamVzdCBkb3N0xJlwbmFcclxuICAgIGlmICh1c2VyTmFtZSkge1xyXG4gICAgICAgIC8vIFVzdGF3aWFuaWUgbmF6d3kgdcW8eXRrb3duaWthIHcgZWxlbWVudGFjaCBIVE1MXHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZXJTdHJvbmcnKS50ZXh0Q29udGVudCA9IHVzZXJOYW1lO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2VyR3JlZXRpbmcnKS50ZXh0Q29udGVudCA9IHVzZXJOYW1lO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdOYXp3aXNrbyB1xbx5dGtvd25pa2EgbmllIHpuYWxlemlvbmUgdyBzZXNzaW9uU3RvcmFnZS4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBXeXN6dWtpd2FuaWUga29udGVuZXJhIGRsYSBDVlxyXG4gICAgY29uc3QgY3ZCb3hlc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdl9fYm94ZXMnKTtcclxuICAgIGlmICghY3ZCb3hlc0NvbnRhaW5lcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VsZW1lbnQga29udGVuZXJhIENWIG5pZSB6b3N0YcWCIHpuYWxlemlvbnkuJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZ1bmtjamEgZG8gdHdvcnplbmlhIGkgZG9kYXdhbmlhIGJveMOzdyBDVlxyXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3ZCb3goY3ZGaWxlKSB7XHJcbiAgICAgICAgY29uc3QgY3ZCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjdkJveC5jbGFzc05hbWUgPSAnY3ZfX2JveCc7XHJcblxyXG4gICAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgIGltZy5zcmMgPSAnLi9kaXN0L2ltZy9jdi1ib3gucG5nJzsgXHJcbiAgICAgICAgaW1nLmFsdCA9ICdaZGrEmWNpZSBzdHdvcnpvbmVnbyBDVic7XHJcbiAgICAgICAgaW1nLmNsYXNzTmFtZSA9ICdjdl9fYm94LXBob3RvJztcclxuICAgICAgICBjdkJveC5hcHBlbmRDaGlsZChpbWcpO1xyXG5cclxuICAgICAgICBjb25zdCBkZWxldGVCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICBkZWxldGVCdG4uY2xhc3NOYW1lID0gJ2RlbGV0ZS1idG4nO1xyXG4gICAgICAgIGRlbGV0ZUJ0bi5pbm5lckhUTUwgPSAnPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS10cmFzaFwiPjwvaT4nO1xyXG4gICAgICAgIGRlbGV0ZUJ0bi5vbmNsaWNrID0gKCkgPT4gZGVsZXRlQ3YoY3ZGaWxlLmlkKTtcclxuICAgICAgICBjdkJveC5hcHBlbmRDaGlsZChkZWxldGVCdG4pO1xyXG5cclxuICAgICAgICBjb25zdCBkb3dubG9hZEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgICAgIGRvd25sb2FkQnRuLmNsYXNzTmFtZSA9ICdkb3dubG9hZC1idG4nO1xyXG4gICAgICAgIGRvd25sb2FkQnRuLmlubmVySFRNTCA9XHJcbiAgICAgICAgICAgICdEb3dubG9hZCB8IDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmlsZS1wZGZcIj48L2k+JztcclxuICAgICAgICBkb3dubG9hZEJ0bi5vbmNsaWNrID0gKCkgPT4gZG93bmxvYWRDdihjdkZpbGUuaWQpO1xyXG4gICAgICAgIGN2Qm94LmFwcGVuZENoaWxkKGRvd25sb2FkQnRuKTtcclxuXHJcbiAgICAgICAgY3ZCb3hlc0NvbnRhaW5lci5hcHBlbmRDaGlsZChjdkJveCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRnVua2NqYSBkbyBwb2JyYW5pYSB3c3p5c3RraWNoIENWIGRsYSB1xbx5dGtvd25pa2FcclxuICAgIGZ1bmN0aW9uIGxvYWRVc2VyQ3ZGaWxlcyh1c2VySWQpIHtcclxuICAgICAgICBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaS9jdmZpbGUvbGlzdC8ke3VzZXJJZH1gKVxyXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05ldHdvcmsgcmVzcG9uc2Ugd2FzIG5vdCBvaycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKGN2RmlsZXMpID0+IHtcclxuICAgICAgICAgICAgICAgIGN2RmlsZXMuZm9yRWFjaCgoY3ZGaWxlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlQ3ZCb3goY3ZGaWxlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdCxYLEhWQgcG9kY3phcyDFgmFkb3dhbmlhIENWOicsIGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUG9icmFuaWUgdXNlcklkIHogc2Vzc2lvblN0b3JhZ2UgaSB6YcWCYWRvd2FuaWUgQ1ZcclxuICAgIGlmICh1c2VySWQpIHtcclxuICAgICAgICBsb2FkVXNlckN2RmlsZXModXNlcklkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignVXNlcklkIG5pZSB6bmFsZXppb25vIHcgc2Vzc2lvblN0b3JhZ2UuJyk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLy8gRnVua2NqYSBkbyBwb2JpZXJhbmlhIENWXHJcbmZ1bmN0aW9uIGRvd25sb2FkQ3YoY3ZGaWxlSWQpIHtcclxuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvY3ZmaWxlL2Rvd25sb2FkLyR7Y3ZGaWxlSWR9YDtcclxufVxyXG5cclxuLy8gRnVua2NqYSBkbyB1c3V3YW5pYSBDVlxyXG5mdW5jdGlvbiBkZWxldGVDdihjdkZpbGVJZCkge1xyXG4gICAgZmV0Y2goYGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9hcGkvY3ZmaWxlL2RlbGV0ZS8ke2N2RmlsZUlkfWAsIHtcclxuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgfSlcclxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnQ1Ygem9zdGHFgm8gdXN1bmnEmXRlLicpO1xyXG4gICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7IC8vIFByemXFgmFkdWogc3Ryb27EmSBwbyB1c3VuacSZY2l1IENWXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpLnRoZW4oKGVycm9yVGV4dCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclRleHQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignQsWCxIVkIHBvZGN6YXMgdXN1d2FuaWEgQ1Y6JywgZXJyb3IpO1xyXG4gICAgICAgICAgICBhbGVydCgnV3lzdMSFcGnFgiBixYLEhWQgcG9kY3phcyB1c3V3YW5pYSBDVjogJyArIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH0pO1xyXG59Il19
